syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package hddl;

enum HalRetCode {
    RC_SUCCESS = 0;
    RC_PIPELINE_EOS = 1;
    RC_RUNTIME_ERROR = 2;
    RC_ERROR = -1;
    RC_COMM_TIMEOUT = -2;
    RC_INVALID_PARAMETER = -3;
    RC_NOT_EXIST = -4;
    RC_ALREADY_CREATED = -5;
    RC_ALREADY_STARTED = -6;
    RC_NOT_PLAYING = -7;
    RC_STOPPED = -8;
    RC_INVALID_DST_PATH = -9;
    RC_FILE_ALREADY_EXIST = -10;
    RC_XLINK_ERROR = -11;
    RC_OUT_OF_CHANNEL_ID= -12;
}

enum HalMsgReqType {
    CREATE_PIPELINE_REQUEST = 0;
    DESTROY_PIPELINE_REQUEST = 1;
    MODIFY_PIPELINE_REQUEST = 2;
    PLAY_PIPELINE_REQUEST = 3;
    PAUSE_PIPELINE_REQUEST = 4;
    STOP_PIPELINE_REQUEST = 5;
    LOAD_FILE_REQUEST = 6;
    UNLOAD_FILE_REQUEST = 7;
    ALLOCATE_CHANNEL_REQUEST = 8;
    DEALLOCATE_CHANNEL_REQUEST = 9;
}

enum HalMsgRspType {
    CREATE_PIPELINE_RESPONSE = 0;
    DESTROY_PIPELINE_RESPONSE = 1;
    MODIFY_PIPELINE_RESPONSE = 2;
    PLAY_PIPELINE_RESPONSE = 3;
    PAUSE_PIPELINE_RESPONSE = 4;
    STOP_PIPELINE_RESPONSE = 5;
    LOAD_FILE_RESPONSE = 6;
    UNLOAD_FILE_RESPONSE = 7;
    ALLOCATE_CHANNEL_RESPONSE = 8;
    DEALLOCATE_CHANNEL_RESPONSE = 9;
    PIPELINE_RUNTIME_ERROR = 10;
    PIPELINE_EOS = 11;
}

enum HalLoadFileType {
    CREATE_FILE = 0;
    OVERWRITE_FILE = 1;
    APPEND_FILE = 2;
}

message HalCreatePipelineRequest
{
    optional string launch_data = 1;
    optional string config_data = 2;
}

message HalCreatePipelineResponse
{
}

message HalDestroyPipelineRequest
{
}

message HalDestroyPipelineResponse
{
}

message HalModifyPipelineRequest
{
    optional string config_data = 1;
}

message HalModifyPipelineResponse
{
}

message HalPlayPipelineRequest
{
}

message HalPlayPipelineResponse
{
}

message HalPausePipelineRequest
{
}

message HalPausePipelineResponse
{
}

message HalStopPipelineRequest
{
}

message HalStopPipelineResponse
{
}

message HalLoadFileRequest
{
    optional string src_data = 1;
    optional string dst_path = 2;
    optional uint64 file_mode = 3;
    optional HalLoadFileType flag = 4;
}

message HalLoadFileResponse
{
}

message HalUnloadFileRequest
{
    optional string file_path = 1;
}

message HalUnloadFileResponse
{
}

message HalAllocateChannelRequest {
    optional uint32 num_channels = 1;
}

message HalAllocateChannelResponse {
    repeated int32 channelId = 1 [packed=true];
}

message HalDeallocateChannelRequest {
    repeated int32 channelId = 1 [packed=true];
}

message HalDeallocateChannelResponse {
}

message HalPipelineRuntimeErrorEvent
{
}

message HalPipelineEosEvent
{
}

message HalMsgBase
{
    optional uint64 send_time = 1;
    optional uint64 receive_time = 2;
}

message HalMsgRequest
{
    optional HalMsgBase base = 1;
    optional HalMsgReqType req_type = 2;
    optional uint64 req_seq_no = 3;
    optional int32 pipeline_id = 4;

    oneof msg
    {
        HalCreatePipelineRequest create = 10;
        HalDestroyPipelineRequest destroy = 11;
        HalModifyPipelineRequest modify = 12;
        HalPlayPipelineRequest play = 13;
        HalPausePipelineRequest pause = 14;
        HalStopPipelineRequest stop = 15;
        HalLoadFileRequest load_file = 30;
        HalUnloadFileRequest unload_file = 31;
        HalAllocateChannelRequest allocate_channel = 32;
        HalDeallocateChannelRequest deallocate_channel = 33;
    }
}

message HalMsgResponse
{
    optional HalMsgBase base = 1;
    optional HalMsgRspType rsp_type = 2;
    optional uint64 req_seq_no = 3;
    optional HalRetCode ret_code = 4;
    optional int32 pipeline_id = 5;

    oneof msg
    {
        HalCreatePipelineResponse create = 10;
        HalDestroyPipelineResponse destroy = 11;
        HalModifyPipelineResponse modify = 12;
        HalPlayPipelineResponse play = 13;
        HalPausePipelineResponse pause = 14;
        HalStopPipelineResponse stop = 15;
        HalLoadFileResponse load_file = 30;
        HalUnloadFileResponse unload_file = 31;
        HalAllocateChannelResponse allocate_channel = 32;
        HalDeallocateChannelResponse deallocate_channel = 33;
        HalPipelineRuntimeErrorEvent runtime_error = 50;
        HalPipelineEosEvent eos = 51;
    }
}
