syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package hddl;

enum HalRetCode {
    RC_SUCCESS = 0;
    RC_PIPELINE_EOS = 1;
    RC_RUNTIME_ERROR = 2;
    RC_ERROR = -1;
    RC_COMM_TIMEOUT = -2;
    RC_INVALID_PARAMETER = -3;
    RC_NOT_EXIST = -4;
    RC_ALREADY_CREATED = -5;
    RC_ALREADY_STARTED = -6;
    RC_NOT_PLAYING = -7;
    RC_STOPPED = -8;
    RC_XLINK_ERROR = -9;
}

enum HalMsgReqType {
    CREATE_PIPELINE_REQUEST = 0;
    DESTROY_PIPELINE_REQUEST = 1;
    MODIFY_PIPELINE_REQUEST = 2;
    PLAY_PIPELINE_REQUEST = 3;
    PAUSE_PIPELINE_REQUEST = 4;
    STOP_PIPELINE_REQUEST = 5;
}

enum HalMsgRspType {
    CREATE_PIPELINE_RESPONSE = 0;
    DESTROY_PIPELINE_RESPONSE = 1;
    MODIFY_PIPELINE_RESPONSE = 2;
    PLAY_PIPELINE_RESPONSE = 3;
    PAUSE_PIPELINE_RESPONSE = 4;
    STOP_PIPELINE_RESPONSE = 5;
}

message HalCreatePipelineRequest {
    optional string launch_data = 1;
    optional string config_data = 2;
}

message HalCreatePipelineResponse {
}

message HalDestroyPipelineRequest {
}

message HalDestroyPipelineResponse {
}

message HalModifyPipelineRequest {
    optional string config_data = 1;
}

message HalModifyPipelineResponse {
}

message HalPlayPipelineRequest {
}

message HalPlayPipelineResponse {
}

message HalPausePipelineRequest {
}

message HalPausePipelineResponse {
}

message HalStopPipelineRequest {
}

message HalStopPipelineResponse {
}

message HalMsgBase {
    optional uint64 send_time = 1;
    optional uint64 receive_time = 2;
}

message HalMsgRequest {
    optional HalMsgBase        base = 1;
    optional HalMsgReqType     req_type = 2;
    optional uint64            req_seq_no = 3;
    optional int32             pipeline_id = 4;

    oneof msg {
        HalCreatePipelineRequest  create = 10;
        HalDestroyPipelineRequest destroy = 11;
        HalModifyPipelineRequest  modify = 12;
        HalPlayPipelineRequest    play = 13;
        HalPausePipelineRequest   pause = 14;
        HalStopPipelineRequest    stop = 15;
    }
}

message HalMsgResponse {
    optional HalMsgBase         base = 1;
    optional HalMsgRspType      rsp_type = 2;
    optional uint64             req_seq_no = 3;
    optional HalRetCode         ret_code = 4;
    optional int32              pipeline_id = 5;

    oneof msg {
        HalCreatePipelineResponse  create = 10;
        HalDestroyPipelineResponse destroy = 11;
        HalModifyPipelineResponse  modify = 12;
        HalPlayPipelineResponse    play = 13;
        HalPausePipelineResponse   pause = 14;
        HalStopPipelineResponse    stop = 15;
    }
}
