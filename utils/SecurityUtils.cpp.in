//
//Copyright (C) 2019 Intel Corporation
//
//SPDX-License-Identifier: MIT
//
#include <string>
#include <type_traits>
#include <@BOOST_HASHER_HEADER@>
#include <boost/algorithm/hex.hpp>

#include "utils/SecurityUtils.h"

namespace HddlUnite {
namespace SecurityUtils {
class Hasher::Impl {
public:
    void processBytes(const std::string& buffer)
    {
        processBytes(buffer.data(), buffer.size());
    }

    void processBytes(void const* buffer, std::size_t byte_count)
    {
        m_hasher.process_bytes(buffer, byte_count);
    }

    std::string getHash()
    {
        std::remove_reference<@BOOST_HASHER_CLASS@::digest_type>::type digest { 0 };
        m_hasher.get_digest(digest);

        std::string result;
        const auto charDigest = reinterpret_cast<const char*>(&digest);
        boost::algorithm::hex(charDigest, charDigest + sizeof(digest), std::back_inserter(result));

        return result;
    }

private:
    @BOOST_HASHER_CLASS@ m_hasher;
};

Hasher::Hasher()
    : m_impl(new Impl())
{
}

Hasher::~Hasher()
{
}

void Hasher::processBytes(const std::string& buffer)
{
    m_impl->processBytes(buffer);
}

void Hasher::processBytes(void const* buffer, size_t byteCount)
{
    m_impl->processBytes(buffer, byteCount);
}

std::string Hasher::getHash()
{
    return m_impl->getHash();
}

std::string getHash(const std::string& buffer)
{
    Hasher hasher;
    hasher.processBytes(buffer);
    return hasher.getHash();
}

std::string getHash(const void* buffer, size_t bufferSize)
{
    Hasher hasher;
    hasher.processBytes(buffer, bufferSize);
    return hasher.getHash();
}
}
}
